/* The following code was generated by JFlex 1.4.3 on 4/13/11 3:09 AM */

package com.js.interpreter.tokenizer;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.util.List;
import java.util.Stack;

import com.js.interpreter.exceptions.GroupingException;
import com.js.interpreter.exceptions.GroupingException.grouping_exception_types;
import com.js.interpreter.linenumber.LineInfo;
import com.js.interpreter.startup.ScriptSource;
import com.js.interpreter.tokens.*;
import com.js.interpreter.tokens.basic.*;
import com.js.interpreter.tokens.grouping.*;
import com.js.interpreter.tokens.value.*;
/**
 * This class is a simple example lexer.
 */

class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRINGDONE = 4;
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int STRINGPOUND = 6;
  public static final int INCLUDE_SNGL_QUOTE = 12;
  public static final int INCLUDE = 8;
  public static final int END_INCLUDE = 14;
  public static final int INCLUDE_DBL_QUOTE = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7, 7
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\4\1\6\2\0\1\5\22\0\1\62\1\0\1\61\1\60"+
    "\1\16\2\0\1\57\1\10\1\13\1\11\1\40\1\52\1\41\1\3"+
    "\1\15\12\2\1\51\1\53\1\42\1\37\1\43\2\0\1\26\1\54"+
    "\1\21\1\24\1\25\1\44\1\50\1\34\1\17\2\1\1\22\1\36"+
    "\1\20\1\27\1\47\1\1\1\31\1\33\1\30\1\23\1\35\1\45"+
    "\1\32\1\46\1\1\1\55\1\0\1\56\1\0\1\1\1\0\1\26"+
    "\1\54\1\21\1\24\1\25\1\44\1\50\1\34\1\17\2\1\1\22"+
    "\1\36\1\20\1\27\1\47\1\1\1\31\1\33\1\30\1\23\1\35"+
    "\1\45\1\32\1\46\1\1\1\12\1\7\1\14\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\6\0\1\2\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\2\1\11\1\12\16\3\1\13\1\14"+
    "\1\15\1\16\1\17\3\3\1\20\1\21\1\22\1\3"+
    "\1\23\1\24\1\25\1\1\1\26\1\27\4\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\6\1\36\1\37\1\40"+
    "\1\1\2\41\2\42\1\43\4\0\1\6\3\0\1\44"+
    "\5\3\1\45\4\3\1\46\1\47\1\50\10\3\1\51"+
    "\1\52\1\53\5\3\1\54\1\3\1\55\1\56\1\55"+
    "\2\0\1\57\2\0\1\60\3\0\2\6\1\61\3\3"+
    "\1\62\1\3\1\63\1\3\1\64\6\3\1\65\1\66"+
    "\1\67\1\70\1\71\2\3\1\72\3\3\1\73\2\0"+
    "\1\74\3\3\1\75\1\3\1\76\1\77\1\100\11\3"+
    "\1\0\1\101\1\102\1\3\1\103\3\3\1\104\1\3"+
    "\1\105\2\3\1\106\1\0\1\107\1\110\1\111\4\3"+
    "\1\0\1\3\1\112\1\3\1\113\1\0\1\114\1\3"+
    "\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\314\0\377\0\u0132\0\u0165"+
    "\0\u0198\0\u01cb\0\u01fe\0\u0198\0\u0231\0\u0264\0\u0198\0\u0297"+
    "\0\u0198\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9\0\u03fc"+
    "\0\u042f\0\u0462\0\u0495\0\u04c8\0\u04fb\0\u052e\0\u0561\0\u0594"+
    "\0\u0198\0\u0198\0\u0198\0\u05c7\0\u05fa\0\u062d\0\u0660\0\u0693"+
    "\0\u06c6\0\u0198\0\u0198\0\u06f9\0\u0198\0\u0198\0\u0198\0\u072c"+
    "\0\u0198\0\u075f\0\u0198\0\u0792\0\u07c5\0\u02ca\0\u0198\0\u0198"+
    "\0\u0198\0\u07f8\0\u082b\0\u085e\0\u0198\0\u082b\0\u082b\0\u0891"+
    "\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u092a\0\u0990\0\u0297\0\u07c5"+
    "\0\u09c3\0\u07c5\0\u09f6\0\u0a29\0\u0a5c\0\u01cb\0\u0a8f\0\u0ac2"+
    "\0\u0af5\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27\0\u0c5a"+
    "\0\u01cb\0\u01cb\0\u01cb\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59"+
    "\0\u0d8c\0\u0dbf\0\u0df2\0\u0198\0\u0198\0\u0198\0\u0e25\0\u0e58"+
    "\0\u0e8b\0\u0ebe\0\u0ef1\0\u0198\0\u0f24\0\u0198\0\u0891\0\u0891"+
    "\0\u092a\0\u095d\0\u0990\0\u0f57\0\u0f8a\0\u0f57\0\u0fbd\0\u0ff0"+
    "\0\u1023\0\u1056\0\u0198\0\u01cb\0\u1089\0\u10bc\0\u10ef\0\u01cb"+
    "\0\u1122\0\u01cb\0\u1155\0\u01cb\0\u1188\0\u11bb\0\u11ee\0\u1221"+
    "\0\u1254\0\u1287\0\u01cb\0\u01cb\0\u01cb\0\u01cb\0\u01cb\0\u12ba"+
    "\0\u12ed\0\u1320\0\u1353\0\u1386\0\u13b9\0\u0f57\0\u13ec\0\u141f"+
    "\0\u01cb\0\u1452\0\u1485\0\u14b8\0\u01cb\0\u14eb\0\u01cb\0\u01cb"+
    "\0\u01cb\0\u151e\0\u1551\0\u1584\0\u15b7\0\u15ea\0\u161d\0\u1650"+
    "\0\u1683\0\u16b6\0\u16e9\0\u01cb\0\u01cb\0\u171c\0\u01cb\0\u174f"+
    "\0\u1782\0\u17b5\0\u01cb\0\u17e8\0\u01cb\0\u181b\0\u184e\0\u01cb"+
    "\0\u1881\0\u01cb\0\u01cb\0\u01cb\0\u18b4\0\u18e7\0\u191a\0\u194d"+
    "\0\u1980\0\u19b3\0\u01cb\0\u19e6\0\u01cb\0\u1a19\0\u01cb\0\u1a4c"+
    "\0\u01cb";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\11\1\12\1\13\1\14\3\15\1\11\1\16\1\17"+
    "\1\20\1\21\1\11\1\22\1\11\1\23\1\24\1\25"+
    "\1\12\1\26\1\27\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\12\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\12\1\50\1\12\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\2\11\1\15"+
    "\5\60\2\61\50\60\1\62\3\60\4\63\3\15\1\63"+
    "\1\64\1\63\1\65\2\63\1\66\41\63\1\67\1\70"+
    "\1\63\1\15\2\71\1\72\60\71\4\73\1\74\2\15"+
    "\2\73\1\75\1\73\2\75\42\73\1\76\1\73\1\77"+
    "\1\15\5\100\2\61\52\100\1\101\6\100\2\61\50\100"+
    "\1\102\3\100\11\103\1\104\2\103\1\105\46\103\64\0"+
    "\2\12\14\0\20\12\5\0\5\12\3\0\1\12\10\0"+
    "\1\13\1\106\63\0\3\15\53\0\1\15\11\0\1\107"+
    "\51\0\11\110\1\111\2\110\1\112\1\110\1\113\44\110"+
    "\11\0\1\114\3\0\1\115\46\0\2\12\14\0\20\12"+
    "\5\0\1\116\4\12\3\0\1\12\7\0\2\12\14\0"+
    "\10\12\1\117\7\12\5\0\5\12\3\0\1\12\7\0"+
    "\2\12\14\0\7\12\1\120\1\121\7\12\5\0\5\12"+
    "\3\0\1\12\7\0\2\12\14\0\1\12\1\122\16\12"+
    "\5\0\5\12\3\0\1\12\7\0\2\12\14\0\1\123"+
    "\7\12\1\124\7\12\5\0\5\12\3\0\1\12\7\0"+
    "\2\12\14\0\1\12\1\125\1\12\1\126\14\12\5\0"+
    "\5\12\3\0\1\12\7\0\2\12\14\0\1\12\1\127"+
    "\10\12\1\130\5\12\5\0\5\12\3\0\1\12\7\0"+
    "\2\12\14\0\12\12\1\131\5\12\5\0\1\132\4\12"+
    "\3\0\1\12\7\0\2\12\14\0\10\12\1\133\1\12"+
    "\1\134\2\12\1\135\2\12\5\0\2\12\1\136\2\12"+
    "\3\0\1\12\7\0\2\12\14\0\6\12\1\137\11\12"+
    "\5\0\5\12\3\0\1\12\7\0\2\12\14\0\10\12"+
    "\1\140\7\12\5\0\5\12\3\0\1\12\7\0\2\12"+
    "\14\0\15\12\1\141\2\12\5\0\5\12\3\0\1\12"+
    "\7\0\2\12\14\0\7\12\1\142\10\12\5\0\5\12"+
    "\3\0\1\12\7\0\2\12\14\0\10\12\1\143\7\12"+
    "\5\0\5\12\3\0\1\12\45\0\1\144\3\0\1\145"+
    "\56\0\1\146\24\0\2\12\14\0\4\12\1\147\2\12"+
    "\1\150\1\151\7\12\5\0\5\12\3\0\1\12\7\0"+
    "\2\12\14\0\15\12\1\152\2\12\5\0\5\12\3\0"+
    "\1\12\7\0\2\12\14\0\12\12\1\153\5\12\5\0"+
    "\5\12\3\0\1\12\45\0\1\154\24\0\2\12\14\0"+
    "\6\12\1\155\11\12\5\0\5\12\3\0\1\12\6\0"+
    "\5\60\2\0\50\60\1\0\3\60\57\0\1\156\14\0"+
    "\1\110\51\0\11\110\1\111\2\110\1\112\46\110\2\0"+
    "\1\72\60\0\5\73\2\0\2\73\1\0\1\73\2\0"+
    "\45\73\1\0\4\73\1\74\2\15\2\73\1\0\1\73"+
    "\2\0\45\73\1\15\5\100\2\0\61\100\2\0\52\100"+
    "\1\157\6\100\2\0\50\100\1\160\3\100\11\161\1\162"+
    "\2\161\1\105\61\161\2\0\46\161\2\0\1\163\60\0"+
    "\13\110\2\0\46\110\11\164\1\165\2\164\1\166\2\164"+
    "\1\167\43\164\11\170\1\171\51\170\5\115\1\172\1\173"+
    "\1\0\53\115\1\0\2\12\14\0\11\12\1\174\6\12"+
    "\5\0\5\12\3\0\1\12\7\0\2\12\14\0\14\12"+
    "\1\175\3\12\5\0\5\12\3\0\1\12\7\0\2\12"+
    "\14\0\1\12\1\176\16\12\5\0\5\12\3\0\1\12"+
    "\7\0\2\12\14\0\11\12\1\177\6\12\5\0\5\12"+
    "\3\0\1\12\7\0\2\12\14\0\16\12\1\200\1\12"+
    "\5\0\5\12\3\0\1\12\7\0\2\12\14\0\20\12"+
    "\5\0\1\12\1\201\3\12\3\0\1\12\7\0\2\12"+
    "\14\0\5\12\1\202\12\12\5\0\5\12\3\0\1\12"+
    "\7\0\2\12\14\0\14\12\1\203\3\12\5\0\5\12"+
    "\3\0\1\12\7\0\2\12\14\0\5\12\1\204\12\12"+
    "\5\0\5\12\3\0\1\12\7\0\2\12\14\0\12\12"+
    "\1\205\5\12\5\0\5\12\3\0\1\12\7\0\2\12"+
    "\14\0\4\12\1\206\13\12\5\0\5\12\3\0\1\12"+
    "\7\0\2\12\14\0\6\12\1\207\11\12\5\0\5\12"+
    "\3\0\1\12\7\0\2\12\14\0\20\12\5\0\3\12"+
    "\1\210\1\12\3\0\1\12\7\0\2\12\14\0\2\12"+
    "\1\211\15\12\5\0\3\12\1\212\1\12\3\0\1\12"+
    "\7\0\2\12\14\0\12\12\1\213\5\12\5\0\5\12"+
    "\3\0\1\12\7\0\2\12\14\0\3\12\1\214\6\12"+
    "\1\215\5\12\5\0\5\12\3\0\1\12\7\0\2\12"+
    "\14\0\12\12\1\216\5\12\5\0\5\12\3\0\1\12"+
    "\7\0\2\12\14\0\5\12\1\217\12\12\5\0\5\12"+
    "\3\0\1\12\7\0\2\12\14\0\1\12\1\220\16\12"+
    "\5\0\5\12\3\0\1\12\7\0\2\12\14\0\3\12"+
    "\1\221\14\12\5\0\5\12\3\0\1\12\7\0\2\12"+
    "\14\0\12\12\1\222\5\12\5\0\5\12\3\0\1\12"+
    "\7\0\2\12\14\0\1\223\17\12\5\0\5\12\3\0"+
    "\1\12\7\0\2\12\14\0\10\12\1\224\7\12\5\0"+
    "\5\12\3\0\1\12\7\0\2\12\14\0\20\12\5\0"+
    "\4\12\1\225\3\0\1\12\6\0\11\164\1\165\2\164"+
    "\1\166\61\164\2\0\52\164\1\226\4\164\1\165\2\164"+
    "\1\166\3\164\1\227\41\164\1\226\11\170\1\230\51\170"+
    "\11\0\1\171\3\0\1\173\53\0\1\173\55\0\2\12"+
    "\14\0\6\12\1\231\11\12\5\0\5\12\3\0\1\12"+
    "\7\0\2\12\14\0\14\12\1\232\3\12\5\0\5\12"+
    "\3\0\1\12\7\0\2\12\14\0\1\233\17\12\5\0"+
    "\5\12\3\0\1\12\7\0\2\12\14\0\1\12\1\234"+
    "\16\12\5\0\5\12\3\0\1\12\7\0\2\12\14\0"+
    "\6\12\1\235\11\12\5\0\5\12\3\0\1\12\7\0"+
    "\2\12\14\0\7\12\1\236\10\12\5\0\5\12\3\0"+
    "\1\12\7\0\2\12\14\0\6\12\1\237\11\12\5\0"+
    "\5\12\3\0\1\12\7\0\2\12\14\0\1\12\1\240"+
    "\16\12\5\0\5\12\3\0\1\12\7\0\2\12\14\0"+
    "\6\12\1\241\11\12\5\0\5\12\3\0\1\12\7\0"+
    "\2\12\14\0\10\12\1\242\7\12\5\0\5\12\3\0"+
    "\1\12\7\0\2\12\14\0\6\12\1\243\11\12\5\0"+
    "\5\12\3\0\1\12\7\0\2\12\14\0\2\12\1\244"+
    "\15\12\5\0\5\12\3\0\1\12\7\0\2\12\14\0"+
    "\14\12\1\245\3\12\5\0\5\12\3\0\1\12\7\0"+
    "\2\12\14\0\20\12\5\0\1\12\1\246\3\12\3\0"+
    "\1\12\7\0\2\12\14\0\3\12\1\247\14\12\5\0"+
    "\5\12\3\0\1\12\7\0\2\12\14\0\2\12\1\250"+
    "\15\12\5\0\4\12\1\251\3\0\1\12\7\0\2\12"+
    "\14\0\1\252\17\12\5\0\5\12\3\0\1\12\6\0"+
    "\11\164\1\165\2\164\1\166\4\164\1\253\41\164\11\170"+
    "\1\230\3\170\1\173\45\170\1\0\2\12\14\0\11\12"+
    "\1\254\6\12\5\0\5\12\3\0\1\12\7\0\2\12"+
    "\14\0\3\12\1\255\14\12\5\0\5\12\3\0\1\12"+
    "\7\0\2\12\14\0\11\12\1\256\6\12\5\0\5\12"+
    "\3\0\1\12\7\0\2\12\14\0\20\12\5\0\2\12"+
    "\1\257\2\12\3\0\1\12\7\0\2\12\14\0\12\12"+
    "\1\260\5\12\5\0\5\12\3\0\1\12\7\0\2\12"+
    "\14\0\7\12\1\261\10\12\5\0\5\12\3\0\1\12"+
    "\7\0\2\12\14\0\11\12\1\262\6\12\5\0\5\12"+
    "\3\0\1\12\7\0\2\12\14\0\6\12\1\263\11\12"+
    "\5\0\5\12\3\0\1\12\7\0\2\12\14\0\7\12"+
    "\1\264\10\12\5\0\5\12\3\0\1\12\7\0\2\12"+
    "\14\0\6\12\1\265\11\12\5\0\5\12\3\0\1\12"+
    "\7\0\2\12\14\0\6\12\1\266\11\12\5\0\5\12"+
    "\3\0\1\12\7\0\2\12\14\0\12\12\1\267\5\12"+
    "\5\0\5\12\3\0\1\12\7\0\2\12\14\0\1\12"+
    "\1\270\16\12\5\0\5\12\3\0\1\12\6\0\11\164"+
    "\1\165\2\164\1\166\5\164\1\271\40\164\1\0\2\12"+
    "\14\0\10\12\1\272\7\12\5\0\5\12\3\0\1\12"+
    "\7\0\2\12\14\0\5\12\1\273\12\12\5\0\5\12"+
    "\3\0\1\12\7\0\2\12\14\0\11\12\1\274\6\12"+
    "\5\0\5\12\3\0\1\12\7\0\2\12\14\0\1\275"+
    "\17\12\5\0\5\12\3\0\1\12\7\0\2\12\14\0"+
    "\12\12\1\276\5\12\5\0\5\12\3\0\1\12\7\0"+
    "\2\12\14\0\5\12\1\277\12\12\5\0\5\12\3\0"+
    "\1\12\7\0\2\12\14\0\7\12\1\300\10\12\5\0"+
    "\5\12\3\0\1\12\6\0\11\164\1\165\2\164\1\166"+
    "\6\164\1\301\37\164\1\0\2\12\14\0\10\12\1\302"+
    "\7\12\5\0\5\12\3\0\1\12\7\0\2\12\14\0"+
    "\5\12\1\303\12\12\5\0\5\12\3\0\1\12\7\0"+
    "\2\12\14\0\4\12\1\304\13\12\5\0\5\12\3\0"+
    "\1\12\7\0\2\12\14\0\17\12\1\305\5\0\5\12"+
    "\3\0\1\12\6\0\11\164\1\165\2\164\1\166\7\164"+
    "\1\306\36\164\1\0\2\12\14\0\1\12\1\307\16\12"+
    "\5\0\5\12\3\0\1\12\7\0\2\12\14\0\12\12"+
    "\1\310\5\12\5\0\5\12\3\0\1\12\6\0\11\164"+
    "\1\165\2\164\1\166\10\164\1\226\35\164\1\0\2\12"+
    "\14\0\6\12\1\311\11\12\5\0\5\12\3\0\1\12"+
    "\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[6783];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\1\6\0\1\11\2\1\1\11\2\1\1\11"+
    "\1\1\1\11\17\1\3\11\6\1\2\11\1\1\3\11"+
    "\1\1\1\11\1\1\1\11\3\1\3\11\3\1\1\11"+
    "\10\1\4\0\1\1\3\0\26\1\3\11\5\1\1\11"+
    "\1\1\1\11\2\1\2\0\1\1\2\0\1\1\3\0"+
    "\1\1\1\11\33\1\2\0\22\1\1\0\15\1\1\0"+
    "\7\1\1\0\4\1\1\0\3\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[201];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;
  
  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /** the stack of open (nested) input streams to read from */
  private java.util.Stack zzStreams = new java.util.Stack();

  /**
   * inner class used to store info for nested
   * input streams
   */
  private static final class ZzFlexStreamInfo {
    java.io.Reader zzReader;
    int zzEndRead;
    int zzStartRead;
    int zzCurrentPos;
    int zzMarkedPos;
    int yyline;
    int yycolumn;
    char [] zzBuffer;
    boolean zzAtEOF;
    boolean zzEOFDone;

    /** sets all values stored in this class */
    ZzFlexStreamInfo(java.io.Reader zzReader, int zzEndRead, int zzStartRead,
                  int zzCurrentPos, int zzMarkedPos, 
                  char [] zzBuffer, boolean zzAtEOF, int yyline, int yycolumn) {
      this.zzReader      = zzReader;
      this.zzEndRead     = zzEndRead;
      this.zzStartRead   = zzStartRead;
      this.zzCurrentPos  = zzCurrentPos;
      this.zzMarkedPos   = zzMarkedPos;
      this.zzBuffer      = zzBuffer;
      this.zzAtEOF       = zzAtEOF;
      this.zzEOFDone     = zzEOFDone;
      this.yyline         = yyline;
      this.yycolumn       = yycolumn;
    }
  }

  /* user code: */
	String sourcename;
	public BaseGrouperToken token_queue;
	Stack<GrouperToken> groupers;
	List<ScriptSource> searchDirectories;
	Stack<String> sourcenames;
	
	StringBuilder literal=new StringBuilder();
	
	void TossException(GroupingExceptionToken t) {
		for (GrouperToken g : groupers) {
			g.put(t);
		}
	}
	private String tmpname;
	private Reader tmpreader;
	void addInclude(String name) throws FileNotFoundException {
		for (ScriptSource s : searchDirectories) {
			Reader r = s.read(name);
			if (r != null) {
				this.tmpreader=r;
				this.tmpname=name;
				return;
			}
		}
		throw new FileNotFoundException("Cannot find the $INCLUDE file " + name);
	}
	void commitInclude() {
		sourcenames.push(tmpname);
		yypushStream(tmpreader);
	}
	
	LineInfo getLine() {
		return new LineInfo(yyline,yycolumn,sourcenames.peek());
	}


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in, String sourcename, List<ScriptSource> searchDirectories) {
  		this.sourcename = sourcename;
		sourcenames=new Stack<String>();
		sourcenames.push(sourcename);
		token_queue = new BaseGrouperToken(getLine());
		groupers = new Stack<GrouperToken>();
		groupers.push(token_queue);
		this.searchDirectories = searchDirectories;
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in, String sourcename, List<ScriptSource> searchDirectories) {
    this(new java.io.InputStreamReader(in), sourcename, searchDirectories);
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 176) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }
    
    // numRead < 0) 
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Stores the current input stream on a stack, and
   * reads from a new stream. Lexical state, line,
   * char, and column counting remain untouched.
   *
   * The current input stream can be restored with
   * yypopstream (usually in an <<EOF>> action).
   *
   * @param reader the new input stream to read from
   *
   * @see #yypopStream()
   */
  public final void yypushStream(java.io.Reader reader) {
    zzStreams.push(
      new ZzFlexStreamInfo(zzReader, zzEndRead, zzStartRead, zzCurrentPos,
                        zzMarkedPos, zzBuffer, zzAtEOF,
                        yyline, yycolumn)
    );
    zzAtEOF  = false;
    zzBuffer = new char[ZZ_BUFFERSIZE];
    zzReader = reader;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yycolumn = 0;
  }
    

  /**
   * Closes the current input stream and continues to
   * read from the one on top of the stream stack. 
   *
   * @throws java.util.EmptyStackException
   *         if there is no further stream to read from.
   *
   * @throws java.io.IOException
   *         if there was an error in closing the stream.
   *
   * @see #yypushStream(java.io.Reader)
   */
  public final void yypopStream() throws java.io.IOException {
    zzReader.close();
    ZzFlexStreamInfo s = (ZzFlexStreamInfo) zzStreams.pop();
    zzBuffer      = s.zzBuffer;
    zzReader      = s.zzReader;
    zzEndRead     = s.zzEndRead;
    zzStartRead   = s.zzStartRead;
    zzCurrentPos  = s.zzCurrentPos;
    zzMarkedPos   = s.zzMarkedPos ;
    zzAtEOF       = s.zzAtEOF;
    zzEOFDone     = s.zzEOFDone;
    yyline         = s.yyline;
    yycolumn       = s.yycolumn;
  }


  /**
   * Returns true iff there are still streams left 
   * to read from on the stream stack.
   */
  public final boolean yymoreStreams() {
    return !zzStreams.isEmpty();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   *
   * @see #yypushStream(java.io.Reader)
   * @see #yypopStream()
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public boolean yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      // cached fields:
      int zzCurrentPosL;
      int zzMarkedPosL = zzMarkedPos;
      int zzEndReadL = zzEndRead;
      char [] zzBufferL = zzBuffer;
      char [] zzCMapL = ZZ_CMAP;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 77: 
          { groupers.peek().put(new ProcedureToken(getLine()));
          }
        case 78: break;
        case 26: 
          { yybegin(STRINGPOUND);
          }
        case 79: break;
        case 21: 
          { literal.setLength(0);
		yybegin(STRING);
          }
        case 80: break;
        case 76: 
          { groupers.peek().put(new FunctionToken(getLine()));
          }
        case 81: break;
        case 66: 
          { groupers.peek().put(new UntilToken(getLine()));
          }
        case 82: break;
        case 32: 
          { literal.setLength(0); yybegin(INCLUDE_DBL_QUOTE);
          }
        case 83: break;
        case 2: 
          { throw new Error("Illegal character <"+
                                                    yytext()+">");
          }
        case 84: break;
        case 61: 
          { groupers.peek().put(new ElseToken(getLine()));
          }
        case 85: break;
        case 49: 
          { groupers.peek().put(new OperatorToken(getLine(),OperatorTypes.NOT));
          }
        case 86: break;
        case 5: 
          { groupers.peek().put(new PeriodToken(getLine()));
          }
        case 87: break;
        case 20: 
          { if (!(groupers.peek() instanceof BracketedToken)) {
			TossException(new GroupingExceptionToken(getLine(),
				grouping_exception_types.MISMATCHED_BRACKETS));
			return false;
		}
		groupers.pop().put(new EOF_Token(getLine()));
          }
        case 88: break;
        case 8: 
          { groupers.peek().put(new OperatorToken(getLine(),OperatorTypes.MULTIPLY));
          }
        case 89: break;
        case 58: 
          { groupers.peek().put(new ForToken(getLine()));
          }
        case 90: break;
        case 65: 
          { groupers.peek().put(new ConstToken(getLine()));
          }
        case 91: break;
        case 42: 
          { groupers.peek().put(new OperatorToken(getLine(),OperatorTypes.NOTEQUAL));
          }
        case 92: break;
        case 34: 
          { TossException(new GroupingExceptionToken(getLine(),
				grouping_exception_types.MISMATCHED_BRACKETS));
          }
        case 93: break;
        case 54: 
          { groupers.peek().put(new OperatorToken(getLine(),OperatorTypes.SHIFTLEFT));
          }
        case 94: break;
        case 29: 
          { addInclude(yytext()); yybegin(END_INCLUDE);
          }
        case 95: break;
        case 44: 
          { groupers.peek().put(new AssignmentToken(getLine()));
          }
        case 96: break;
        case 3: 
          { groupers.peek().put(new WordToken(getLine(),yytext().toLowerCase()));
          }
        case 97: break;
        case 63: 
          { groupers.peek().put(new ThenToken(getLine()));
          }
        case 98: break;
        case 10: 
          { groupers.peek().put(new OperatorToken(getLine(),OperatorTypes.DIVIDE));
          }
        case 99: break;
        case 22: 
          { throw new Error("You must close your quotes before starting a new line");
          }
        case 100: break;
        case 33: 
          { addInclude(literal.toString()); yybegin(END_INCLUDE);
          }
        case 101: break;
        case 11: 
          { groupers.peek().put(new OperatorToken(getLine(),OperatorTypes.EQUALS));
          }
        case 102: break;
        case 30: 
          { throw new Error("Missing file to include");
          }
        case 103: break;
        case 23: 
          { yybegin(STRINGDONE);
          }
        case 104: break;
        case 16: 
          { groupers.peek().put(new ColonToken(getLine()));
          }
        case 105: break;
        case 15: 
          { groupers.peek().put(new OperatorToken(getLine(),OperatorTypes.GREATERTHAN));
          }
        case 106: break;
        case 51: 
          { LineInfo line=getLine();
			GrouperToken top_of_stack=groupers.peek();
			if (top_of_stack instanceof BeginEndToken
					|| top_of_stack instanceof RecordToken
					|| top_of_stack instanceof CaseToken) {
				top_of_stack.put(new EOF_Token(getLine()));
				groupers.pop();
			} else {
				TossException(new GroupingExceptionToken(
						line,
						grouping_exception_types.MISMATCHED_BEGIN_END));
				return false;
			}
          }
        case 107: break;
        case 43: 
          { groupers.peek().put(new OperatorToken(getLine(),OperatorTypes.GREATEREQ));
          }
        case 108: break;
        case 31: 
          { literal.setLength(0); yybegin(INCLUDE_SNGL_QUOTE);
          }
        case 109: break;
        case 41: 
          { groupers.peek().put(new OperatorToken(getLine(),OperatorTypes.LESSEQ));
          }
        case 110: break;
        case 40: 
          { groupers.peek().put(new ToToken(getLine()));
          }
        case 111: break;
        case 55: 
          { groupers.peek().put(new OperatorToken(getLine(),OperatorTypes.SHIFTRIGHT));
          }
        case 112: break;
        case 74: 
          { groupers.peek().put(new ForwardToken(getLine()));
          }
        case 113: break;
        case 48: 
          { System.err.println(getLine() + ": Warning! Unrecognized Compiler Directive!");
          }
        case 114: break;
        case 70: 
          { BeginEndToken tmp = new BeginEndToken(getLine());
		groupers.peek().put(tmp);
		groupers.push(tmp);
          }
        case 115: break;
        case 1: 
          { literal.append(yytext());
          }
        case 116: break;
        case 17: 
          { groupers.peek().put(new CommaToken(getLine()));
          }
        case 117: break;
        case 60: 
          { CaseToken tmp = new CaseToken(getLine());
		groupers.peek().put(tmp);
		groupers.push(tmp);
          }
        case 118: break;
        case 53: 
          { groupers.peek().put(new OperatorToken(getLine(),OperatorTypes.XOR));
          }
        case 119: break;
        case 64: 
          { groupers.peek().put(new TypeToken(getLine()));
          }
        case 120: break;
        case 18: 
          { groupers.peek().put(new SemicolonToken(getLine()));
          }
        case 121: break;
        case 57: 
          { groupers.peek().put(new OperatorToken(getLine(),OperatorTypes.MOD));
          }
        case 122: break;
        case 9: 
          { if (!(groupers.peek() instanceof ParenthesizedToken)) {
			TossException(new GroupingExceptionToken(getLine(),
					grouping_exception_types.MISMATCHED_PARENS));
			return false;
		}
		groupers.pop().put(new EOF_Token(getLine()));
          }
        case 123: break;
        case 37: 
          { groupers.peek().put(new DoToken(getLine()));
          }
        case 124: break;
        case 27: 
          { throw new Error("Expected character code, not <"+ yytext()+">");
          }
        case 125: break;
        case 59: 
          { yybegin(INCLUDE);
          }
        case 126: break;
        case 69: 
          { groupers.peek().put(new WhileToken(getLine()));
          }
        case 127: break;
        case 56: 
          { groupers.peek().put(new VarToken(getLine()));
          }
        case 128: break;
        case 13: 
          { groupers.peek().put(new OperatorToken(getLine(),OperatorTypes.MINUS));
          }
        case 129: break;
        case 25: 
          { yybegin(STRING);
          }
        case 130: break;
        case 62: 
          { groupers.peek().put(new BooleanToken(getLine(),true));
          }
        case 131: break;
        case 14: 
          { groupers.peek().put(new OperatorToken(getLine(),OperatorTypes.LESSTHAN));
          }
        case 132: break;
        case 39: 
          { groupers.peek().put(new OfToken(getLine()));
          }
        case 133: break;
        case 50: 
          { groupers.peek().put(new OperatorToken(getLine(),OperatorTypes.DIV));
          }
        case 134: break;
        case 47: 
          { groupers.peek().put(new DoubleToken(getLine(),Double.parseDouble(yytext())));
          }
        case 135: break;
        case 4: 
          { groupers.peek().put(new IntegerToken(getLine(),Integer.parseInt(yytext())));
          }
        case 136: break;
        case 38: 
          { groupers.peek().put(new OperatorToken(getLine(),OperatorTypes.OR));
          }
        case 137: break;
        case 36: 
          { groupers.peek().put(new IfToken(getLine()));
          }
        case 138: break;
        case 67: 
          { groupers.peek().put(new ArrayToken(getLine()));
          }
        case 139: break;
        case 46: 
          { literal.append('\"');
          }
        case 140: break;
        case 24: 
          { yypushback(1);
			yybegin(YYINITIAL); 
			if(literal.length()==1) {
				groupers.peek().put(new CharacterToken(getLine(),literal.toString().charAt(0)));
			} else {
				groupers.peek().put(new StringToken(getLine(),literal.toString()));
			}
          }
        case 141: break;
        case 19: 
          { BracketedToken tmp = new BracketedToken(getLine());
		groupers.peek().put(tmp);
		groupers.push(tmp);
          }
        case 142: break;
        case 28: 
          { literal.append((char)Integer.parseInt(yytext())); yybegin(STRINGDONE);
          }
        case 143: break;
        case 52: 
          { groupers.peek().put(new OperatorToken(getLine(),OperatorTypes.AND));
          }
        case 144: break;
        case 71: 
          { groupers.peek().put(new DowntoToken(getLine()));
          }
        case 145: break;
        case 75: 
          { groupers.peek().put(new ProgramToken(getLine()));
          }
        case 146: break;
        case 72: 
          { RecordToken tmp = new RecordToken(getLine());
		groupers.peek().put(tmp);
		groupers.push(tmp);
          }
        case 147: break;
        case 73: 
          { groupers.peek().put(new RepeatToken(getLine()));
          }
        case 148: break;
        case 12: 
          { groupers.peek().put(new OperatorToken(getLine(),OperatorTypes.PLUS));
          }
        case 149: break;
        case 35: 
          { yybegin(YYINITIAL); commitInclude();
          }
        case 150: break;
        case 68: 
          { groupers.peek().put(new BooleanToken(getLine(),false));
          }
        case 151: break;
        case 45: 
          { literal.append('\'');
          }
        case 152: break;
        case 7: 
          { ParenthesizedToken tmp = new ParenthesizedToken(getLine());
		groupers.peek().put(tmp);
		groupers.push(tmp);
          }
        case 153: break;
        case 6: 
          { 
          }
        case 154: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
              { 	if (!yymoreStreams()) {
		Token end = null;
		GrouperToken top_of_stack=groupers.peek();
		if (groupers.size() != 1) {
			if (top_of_stack instanceof ParenthesizedToken) {
				TossException(new GroupingExceptionToken(
					top_of_stack.lineInfo,
					grouping_exception_types.UNFINISHED_PARENS));
			} else if (top_of_stack instanceof BeginEndToken) {
				TossException(new GroupingExceptionToken(
					top_of_stack.lineInfo,
					grouping_exception_types.UNFINISHED_BEGIN_END));
			} else {
				TossException(new GroupingExceptionToken(
					top_of_stack.lineInfo,
					grouping_exception_types.UNFINISHED_CONSTRUCT));
			}
		} else {
			top_of_stack.put(new EOF_Token(getLine()));
		}
		return false;
	}
	sourcenames.pop();
	yypopStream();
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
